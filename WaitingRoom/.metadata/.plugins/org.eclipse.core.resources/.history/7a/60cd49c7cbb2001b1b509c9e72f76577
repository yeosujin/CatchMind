package CreateRoom;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class WaitingRoom  {
	
	private JTextArea jta = new JTextArea(40,25);
	private JTextField jtf = new JTextField(25);
	private static String nickName;

	public WaitingRoom(JFrame Wframe) {
		
		
		Wframe = new JFrame();
		Wframe.getContentPane().setBackground(Color.WHITE);
		Wframe.setBackground(Color.WHITE);
		Wframe.setBounds(100, 100, 1600, 1200);
		Wframe.setLocationRelativeTo(Wframe);
		Wframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Wframe.getContentPane().setLayout(null);
		Wframe.setVisible(true);
		
		 Scanner scanner = new Scanner(System.in);
	        System.out.print("당신의 닉네임부터 설정하세요 : ");
	        nickName = scanner.nextLine();
	        scanner.close();	 
	        new ClientGui();
					
	}
	
	public class ClientBackground {
		 
	    private Socket socket;
	    private DataInputStream in;
	    private DataOutputStream out;
	    private ClientGui gui;
	    private String msg;
	    private String nickName;
	 
	    public final void setGui(ClientGui gui) {
	        this.gui = gui;
	    }
	 
	    public void connet() {
	        try {
	            socket = new Socket("127.0.0.1", 7777);
	            System.out.println("서버 연결됨.");
	 
	            out = new DataOutputStream(socket.getOutputStream());
	            in = new DataInputStream(socket.getInputStream());
	 
	            // 접속하자마자 닉네임 전송하면. 서버가 이걸 닉네임으로 인식을 하고서 맵에 집어넣겠지요?
	            out.writeUTF(nickName);
	            System.out.println("클라이언트 : 메시지 전송완료");
	            while (in != null) {
	                msg = in.readUTF();
	                gui.appendMsg(msg);
	            }
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	 
	 
	    public void sendMessage(String msg2) {
	        try {
	            out.writeUTF(msg2);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	 
	    public void setNickname(String nickName) {
	        this.nickName = nickName;
	    }
	 
	}

	

	public class ClientGui extends JFrame implements ActionListener {
		 
	    private static final long serialVersionUID = 1L;
	    private JTextArea jta = new JTextArea(40, 25);
	    private JTextField jtf = new JTextField(25);
	    private ClientBackground client = new ClientBackground();
	   
	 
	    public ClientGui() {
	 
	        add(jta, BorderLayout.CENTER);
	        add(jtf, BorderLayout.SOUTH);
	        jtf.addActionListener(this);
	 
	        setDefaultCloseOperation(EXIT_ON_CLOSE);
	        setVisible(true);
	        setBounds(800, 100, 400, 600);
	        setTitle("클라이언트");
	 
	        client.setGui(this);
	        client.setNickname(nickName);
	        client.connet();
	    }
	 
	    @Override
	    // 말치면 보내는 부분
	    public void actionPerformed(ActionEvent e) {
	        String msg = nickName + ":" + jtf.getText() + "\n";
	        client.sendMessage(msg);
	        jtf.setText("");
	    }
	 
	    public void appendMsg(String msg) {
	        jta.append(msg);
	    }
	 
	}

		
}


