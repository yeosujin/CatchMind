package CreateRoom;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;

import javax.swing.JFrame;

public class WaitingRoom  {

	public WaitingRoom(JFrame Wframe) {
		
		
		Wframe = new JFrame();
		Wframe.getContentPane().setBackground(Color.WHITE);
		Wframe.setBackground(Color.WHITE);
		Wframe.setBounds(100, 100, 1600, 1200);
		Wframe.setLocationRelativeTo(Wframe);
		Wframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Wframe.getContentPane().setLayout(null);
		Wframe.setVisible(true);
		
		
		try{
			Socket socket = null;
		
			socket = new Socket("222.104.31.179", 8000); 
			System.out.println("서버에 접속 성공!"); // 접속 확인용
			
			ListeningThread t1 = new ListeningThread(socket);
			WritingThread t2 = new WritingThread(socket); // 서버로 메세지 보내는 Thread

			t1.start(); // ListeningThread Start
			t2.start(); // WritingThread Start
			
			
		}catch(IOException e) {
			
			
		}		
		
	}
	

	public class ListeningThread extends Thread { // 서버에서 보낸 메세지 읽는 Thread
		Socket socket = null;
		public ListeningThread(Socket socket) { // 생성자
			this.socket = socket; // 받아온 Socket Parameter를 해당 클래스 Socket에 넣기
		}	
		public void run() {
			try {
				// InputStream - Server에서 보낸 메세지를 클라이언트로 가져옴
				InputStream input = socket.getInputStream(); // socket의 InputStream 정보를 InputStream in에 넣은 뒤
				BufferedReader reader = new BufferedReader(new InputStreamReader(input)); // BufferedReader에 위 InputStream을 담아 사용
				
				while(true) { // 무한반복
					System.out.println(reader.readLine());
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			}		
		}
	}

	
	
	public class WritingThread extends Thread { // 서버로 메세지 보내는 Thread
		Socket socket = null;
		
		Scanner scanner = new Scanner(System.in); // 채팅용 Scanner		
		public WritingThread(Socket socket) { // 생성자
			this.socket = socket; // 받아온 Socket Parameter를 해당 클래스 Socket에 넣기
		}		
		public void run() {
			try {
				// OutputStream - 클라이언트에서 Server로 메세지 발송 
				OutputStream out = socket.getOutputStream(); // socket의 OutputStream 정보를 OutputStream out에 넣은 뒤
				PrintWriter writer = new PrintWriter(out, true); // PrintWriter에 위 OutputStream을 담아 사용
				
				while(true) { // 무한반복
					writer.println(scanner.nextLine()); // 입력한 메세지 발송
				}
				
			} catch (Exception e) {
				e.printStackTrace(); // 예외처리
			}		
		}
	}
	
	
	
	
	
}

